# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EFj5MRt_lpj1SRGP5tYtO-XIAT-RNrYY
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
import numpy as np
import os
from PIL import Image

# Load airplane images from CIFAR-10 dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()

# Filter out only airplane images
x_train_airplanes = x_train[np.where(y_train[:, 0] == 0)]
x_test_airplanes = x_test[np.where(y_test[:, 0] == 0)]

# Check if drone images exist and resize them if needed
drone_images = []
drone_filenames = ['drone1.png', 'drone2.png', 'drone3.png', 'drone4.png']
for filename in drone_filenames:
    if os.path.exists(filename):
        img = Image.open(filename)
        if img.size != (32, 32):
            img = img.resize((32, 32))
        img_array = img_to_array(img)
        drone_images.append(img_array)
    else:
        print(f"Error: {filename} not found in the current directory.")
        break

if len(drone_images) == 4:
    drone_images = np.array(drone_images)

    # Combine airplane and drone images
    x_train_combined = np.concatenate((x_train_airplanes, drone_images), axis=0)
    y_train_combined = np.concatenate((np.zeros(len(x_train_airplanes)), np.ones(len(drone_images))), axis=0)

    # Data augmentation
    datagen = ImageDataGenerator(
        rotation_range=20,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True
    )

    # Create CNN model
    model = Sequential([
        Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
        MaxPooling2D((2, 2)),
        Conv2D(64, (3, 3), activation='relu'),
        MaxPooling2D((2, 2)),
        Flatten(),
        Dense(128, activation='relu'),
        Dense(1, activation='sigmoid')
    ])

    # Compile and train the model
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    model.fit(datagen.flow(x_train_combined, y_train_combined, batch_size=32), epochs=20, validation_data=(x_test_airplanes, np.zeros(len(x_test_airplanes))))

    # Save the model
    model.save('airplane_drone_classifier.h5')
else:
    print("Error: All 4 drone images are not present in the current directory.")
